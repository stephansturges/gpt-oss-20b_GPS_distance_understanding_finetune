SCORING & SELECTION ALGORITHM
  +5 unit, +3 near distance keywords, +2 final-ish cues, +2 tail bias
  −6 DMS, −6 Earth radius, −4 math-only, −1 tiny magnitude (<5)
  Rank by (score desc, pos desc, magnitude desc); infer unit if missing.
  Buckets: <1% 10pts | <5% 3pts | <10% 1pt | else 0pt
  Fallbacks: analysis channel, then final tail.
────────────────────────────────────────────────────────────────────────────────
Loaded 20 eval rows from eval_set.parquet
Model: openai/gpt-oss-20b
Decoding: deterministic (kwargs will reflect sampling only if sampling)
Multi-GPU: auto-shard (model_kwargs: {
  "trust_remote_code": true,
  "dtype": "auto",
  "low_cpu_mem_usage": true,
  "device_map": "auto",
  "max_memory": {
    "0": 48318382080,
    "1": 48318382080,
    "cpu": 103079215104
  }
})
Tokenizer padding_side=left pad_token_id=199999
────────────────────────────────────────────────────────────────────────────────

BATCH 1/20  rows 0..0
Generation kwargs: {"max_new_tokens": 1000, "do_sample": false}

════════════════════════════════════════════════════════════════════════════════
SAMPLE 1/20  (batch 0-0)
────────────────────────────────────────────────────────────────────────────────
>> MESSAGES SENT
[DEVELOPER] you are an agent that understands GPS and can calculate distances
[USER] 37° 9.027′ S, 30° 53.280′ E
5 °34.465' S ,110 °15.713' E
────────────────────────────────────────────────────────────────────────────────
>> RAW PIPELINE OUTPUT
[{"role": "system", …
>> EXTRACTED ANALYSIS TEXT
(none)
>> EXTRACTED FINAL TEXT
[{"role": "system", "content": "you are an agent that understands GPS and can calculate distances"}, {"role": "user", "content": "37° 9.027′ S, 30° 53.280′ E\n5 °34.465' S ,110 °15.713' E"}, {"role": "assistant", "content": "analysisThe user provided two coordinates: 37° 9.027′ S, 30° 53.280′ E and 5 °34.465' S,110 °15.713' E. They likely want the distance between them. The instruction: \"you are an agent that understands GPS and can calculate distances\". So we need to compute the great-circle distance between these two points. Use haversine formula. Let's compute.\n\nFirst coordinate: lat1 = -37° 9.027' S. Convert to decimal degrees: 9.027' = 9.027/60 = 0.15045°. So lat1 = -37.15045°. lon1 = 30° 53.280' E. 53.280' = 53.280/60 = 0.888°. So lon1 = 30.888°.\n\nSecond coordinate: lat2 = -5° 34.465' S. 34.465' = 34.465/60 = 0.5744167°. So lat2 = -5.5744167°. lon2 = 110° 15.713' E. 15.713' = 15.713/60 = 0.2618833°. So lon2 = 110.2618833°.\n\nNow compute haversine. Use Earth radius R = 6371 km.\n\nCompute Δlat = lat2 - lat1 = (-5.5744167) - (-37.15045) = 31.5760333° in degrees. Convert to radians: 31.5760333 * π/180 = 0.5513 rad approx. Let's compute precisely: 31.5760333 * 0.017453292519943295 = 0.5513 rad.\n\nΔlon = lon2 - lon1 = 110.2618833 - 30.888 = 79.3738833°. In radians: 79.3738833 * 0.017453292519943295 = 1.3865 rad.\n\nNow haversine formula: a = sin²(Δlat/2) + cos(lat1) * cos(lat2) * sin²(Δlon/2).\n\nCompute lat1 rad: -37.15045° * 0.017453292519943295 = -0.6487 rad. lat2 rad: -5.5744167° * 0.017453292519943295 = -0.0974 rad.\n\nCompute sin²(Δlat/2): Δlat/2 = 0.27565 rad. sin(0.27565) = 0.2723. Square: 0.0741.\n\nCompute sin²(Δlon/2): Δlon/2 = 0.69325 rad. sin(0.69325) = 0.6395. Square: 0.4090.\n\nCompute cos(lat1) = cos(-0.6487) = 0.7965. cos(lat2) = cos(-0.0974) = 0.9953.\n\nNow a = 0.0741 + 0.7965*0.9953*0.4090 = 0.0741 + 0.7965*0.9953 = 0.7925? Wait compute product: 0.7965*0.9953 = 0.7925. Multiply by 0.4090 = 0.3240. So a = 0.0741 + 0.3240 = 0.3981.\n\nNow c = 2 * atan2( sqrt(a), sqrt(1-a) ). sqrt(a) = sqrt(0.3981) = 0.6310. sqrt(1-a) = sqrt(0.6019) = 0.7758. atan2(0.6310, 0.7758) = 0.667 rad? Let's compute: arctan(0.6310/0.7758) = arctan(0.8135) = 0.684 rad? Wait compute precisely: arctan(0.8135) = 0.684 rad. Then c = 2*0.684 = 1.368 rad.\n\nDistance = R * c = 6371 * 1.368 = 8715 km approx.\n\nLet's compute more precisely: 6371 * 1.368 = 8715.5 km.\n\nThus distance ~ 8,720 km.\n\nWe can provide answer. Also maybe ask if they want miles. Provide both.\n\nMiles: 1 km = 0.621371 miles. So 8715 km * 0.621371 = 5415 miles approx.\n\n"}]
>> NUMERIC CANDIDATES (value [unit_raw] -> km/mi/nmi)
  8720.0  [km]  ->  km:8720.000000, mi:14033.479680, nmi:16149.440000
  8715.5  [km]  ->  km:8715.500000, mi:14026.237632, nmi:16141.106000
  5415.0  [mi]  ->  km:5415.000000, mi:8714.597760, nmi:10028.580000
  8715.0  [km]  ->  km:8715.000000, mi:14025.432960, nmi:16140.180000
  8715.0  [km]  ->  km:8715.000000, mi:14025.432960, nmi:16140.180000
  0.621371  [mi]  ->  km:0.621371, mi:1.000000, nmi:1.150779
  1.0  [km]  ->  km:1.000000, mi:1.609344, nmi:1.852000
  1368.0  [-]  ->  km:1368.000000, mi:2201.582592, nmi:2533.536000
  6371.0  [-]  ->  km:6371.000000, mi:10253.130624, nmi:11799.092000
  1368.0  [-]  ->  km:1368.000000, mi:2201.582592, nmi:2533.536000
>> DECISION TRACE (winning candidate)
  value=8720.0  unit_raw='km'  unit_norm='km'
  assumed_unit=km  parsed_km=8720.0
  score=12  breakdown={'unit_bonus': 5, 'near_keyword': 3, 'finalish': 2, 'tail_bias': 2}  span=[2420,2428]
  context=...* 1.368 = 8715.5 km.\n\nThus distance ~ 8,720 km.\n\nWe can provide answer. Also maybe a...
>> DECISION & SCORE
expected_km=8692.541445731445
parsed_raw: 8720.0 [km]  explicit_norm=km
assumed_unit=km  parsed_km=8720.0  rel_error=0.32%
flags={'near_keyword': True, 'radius_context': False}  analysis_fallback_used=False
context: ...* 1.368 = 8715.5 km.\n\nThus distance ~ 8,720 km.\n\nWe can provide answer. Also maybe a...
bucket=perfect  points=10
-- batch generation time: 34.72s

BATCH 2/20  rows 1..1
Generation kwargs: {"max_new_tokens": 1000, "do_sample": false}

════════════════════════════════════════════════════════════════════════════════
SAMPLE 2/20  (batch 1-1)
────────────────────────────────────────────────────────────────────────────────
>> MESSAGES SENT
[DEVELOPER] you are an agent that understands GPS and can calculate distances
[USER] -43.464468, -8.793557  -14.155574  ,  -163.542116
────────────────────────────────────────────────────────────────────────────────
>> RAW PIPELINE OUTPUT
[{"role": "system", …
>> EXTRACTED ANALYSIS TEXT
(none)
>> EXTRACTED FINAL TEXT
[{"role": "system", "content": "you are an agent that understands GPS and can calculate distances"}, {"role": "user", "content": "-43.464468, -8.793557  -14.155574  ,  -163.542116"}, {"role": "assistant", "content": "analysisThe user provided three coordinate pairs? Actually they wrote \"-43.464468, -8.793557  -14.155574 ,  -163.542116\". That looks like maybe three coordinates: (-43.464468, -8.793557), (-14.155574,???) and (-163.542116,???). But the formatting is ambiguous. They might be giving three points: first point: lat -43.464468, lon -8.793557. Second point: lat -14.155574, lon???. Third point: lat -163.542116, lon???. But they didn't provide second lon or third lon. Maybe they omitted commas. Could be they want to calculate distances between these points? Or maybe they want to compute distance between first and second, and between second and third? But we need to interpret.\n\nThe user wrote \"-43.464468, -8.793557  -14.155574 ,  -163.542116\". There is a comma after -8.793557, then a space, then -14.155574, then a comma, then -163.542116. So maybe they intended to provide three coordinates: (-43.464468, -8.793557), (-14.155574,???), (-163.542116,???). But the second coordinate is missing a second value. The third coordinate also missing a second value. So maybe they intended to provide three points: (-43.464468, -8.793557), (-14.155574, -163.542116). That would be two points: first lat -43.464468, lon -8.793557; second lat -14.155574, lon -163.542116. That seems plausible: they omitted a comma between -14.155574 and -163.542116? Actually they wrote \"-14.155574 ,  -163.542116\". So there is a comma after -14.155574, then a space, then -163.542116. So maybe they intended to separate lat and lon with comma, but they used a comma after lat, then a space, then lon. So the second point is lat -14.155574, lon -163.542116. So we have two points: (-43.464468, -8.793557) and (-14.155574, -163.542116). That seems likely.\n\nThus we need to calculate the distance between these two points. The user says \"you are an agent that understands GPS and can calculate distances\". So we should compute the great-circle distance between these two coordinates. Use haversine formula. Provide distance in kilometers and maybe miles.\n\nLet's compute approximate distance.\n\nCoordinates:\nPoint A: lat1 = -43.464468°, lon1 = -8.793557°\nPoint B: lat2 = -14.155574°, lon2 = -163.542116°\n\nWe need to compute haversine.\n\nFirst convert to radians:\nlat1_rad = -43.464468 * pi/180\nlon1_rad = -8.793557 * pi/180\nlat2_rad = -14.155574 * pi/180\nlon2_rad = -163.542116 * pi/180\n\nCompute differences:\ndlat = lat2_rad - lat1_rad\ndlon = lon2_rad - lon1_rad\n\nCompute a = sin(dlat/2)^2 + cos(lat1_rad)*cos(lat2_rad)*sin(dlon/2)^2\nc = 2*atan2(sqrt(a), sqrt(1-a))\ndistance = R * c, where R ~ 6371 km.\n\nLet's approximate.\n\nCompute lat1_rad: -43.464468° * pi/180 = -0.7585 rad (approx). Actually 43.464468/180 = 0.2415, times pi = 0.7585 rad. Negative.\n\nlat2_rad: -14.155574° * pi/180 = -0.2472 rad.\n\nlon1_rad: -8.793557° * pi/180 = -0.1535 rad.\n\nlon2_rad: -163.542116° * pi/180 = -2.8565 rad.\n\nCompute dlat = -0.2472 - (-0.7585) = 0.5113 rad.\n\ndlon = -2.8565 - (-0.1535) = -2.7030 rad.\n\nCompute sin(dlat/2)^2: dlat/2 = 0.25565 rad. sin(0.25565) ≈ 0.2528. Square: 0.0639.\n\nCompute sin(dlon/2)^2: dlon/2 = -1.3515 rad."}]
>> NUMERIC CANDIDATES (value [unit_raw] -> km/mi/nmi)
  0.0639  [-]  ->  km:0.063900, mi:0.102837, nmi:0.118343
  1.0  [-]  ->  km:1.000000, mi:1.609344, nmi:1.852000
  163.542116  [-]  ->  km:163.542116, mi:263.195523, nmi:302.879999
  163.542116  [-]  ->  km:163.542116, mi:263.195523, nmi:302.879999
  14.155574  [-]  ->  km:14.155574, mi:22.781188, nmi:26.216123
  163.542116  [-]  ->  km:163.542116, mi:263.195523, nmi:302.879999
  43.464468  [-]  ->  km:43.464468, mi:69.949281, nmi:80.496195
  163.542116  [-]  ->  km:163.542116, mi:263.195523, nmi:302.879999
  14.155574  [-]  ->  km:14.155574, mi:22.781188, nmi:26.216123
  8.793557  [-]  ->  km:8.793557, mi:14.151858, nmi:16.285668
>> DECISION TRACE (winning candidate)
  value=0.0639  unit_raw=None  unit_norm=None
  assumed_unit=nmi  parsed_km=0.1183428
  score=6  breakdown={'near_keyword': 3, 'finalish': 2, 'tail_bias': 2, 'tiny_penalty': -1}  span=[3301,3307]
  context=...565 rad. sin(0.25565) ≈ 0.2528. Square: 0.0639.\n\nCompute sin(dlon/2)^2: dlon/2 = -1....
>> DECISION & SCORE
expected_km=13112.446257871145
parsed_raw: 0.0639 [—]  explicit_norm=—
assumed_unit=nmi  parsed_km=0.1183428  rel_error=100.00%
flags={'near_keyword': True, 'radius_context': False}  analysis_fallback_used=False
context: ...565 rad. sin(0.25565) ≈ 0.2528. Square: 0.0639.\n\nCompute sin(dlon/2)^2: dlon/2 = -1....
bucket=wrong  points=0
-- batch generation time: 33.92s

BATCH 3/20  rows 2..2
Generation kwargs: {"max_new_tokens": 1000, "do_sample": false}

════════════════════════════════════════════════════════════════════════════════
SAMPLE 3/20  (batch 2-2)
────────────────────────────────────────────────────────────────────────────────
>> MESSAGES SENT
[DEVELOPER] you are an agent that understands GPS and can calculate distances
[USER] how far from -62.216154, -110.378377 to -80.148837   -18.021828?
────────────────────────────────────────────────────────────────────────────────
>> RAW PIPELINE OUTPUT
[{"role": "system", …
>> EXTRACTED ANALYSIS TEXT
(none)
>> EXTRACTED FINAL TEXT
[{"role": "system", "content": "you are an agent that understands GPS and can calculate distances"}, {"role": "user", "content": "how far from -62.216154, -110.378377 to -80.148837   -18.021828?"}, {"role": "assistant", "content": "analysisWe need to compute distance between two coordinates: first point: lat -62.216154, lon -110.378377. Second point: lat -80.148837, lon -18.021828. We need to compute great-circle distance. Use haversine formula. Let's compute.\n\nCoordinates:\n\nPoint A: lat1 = -62.216154°, lon1 = -110.378377°\nPoint B: lat2 = -80.148837°, lon2 = -18.021828°\n\nWe need to compute distance. Let's do approximate.\n\nFirst convert to radians:\n\nlat1_rad = -62.216154 * π/180. Let's compute: 62.216154/180 = 0.3457; times π ≈ 1.085? Wait compute precisely: 62.216154 * π/180. π ≈ 3.141592653589793. So 62.216154 * 3.141592653589793 / 180 = (62.216154 * 0.017453292519943295) = 1.085? Let's compute: 62.216154 * 0.017453292519943295 = 1.085? 62 * 0.01745 = 1.0829; plus 0.216154*0.01745=0.00377; sum 1.0867. So lat1_rad ≈ -1.0867 rad.\n\nlon1_rad = -110.378377 * 0.017453292519943295 = -1.927? 110 * 0.01745 = 1.919; plus 0.378377*0.01745=0.0066; sum 1.9256. So lon1_rad ≈ -1.9256 rad.\n\nlat2_rad = -80.148837 * 0.017453292519943295 = -1.399? 80 * 0.01745 = 1.3963; plus 0.148837*0.01745=0.0026; sum 1.3989. So lat2_rad ≈ -1.3989 rad.\n\nlon2_rad = -18.021828 * 0.017453292519943295 = -0.314? 18 * 0.01745 = 0.3142; plus 0.021828*0.01745=0.00038; sum 0.3146. So lon2_rad ≈ -0.3146 rad.\n\nNow compute haversine:\n\nΔlat = lat2 - lat1 = (-1.3989) - (-1.0867) = -0.3122 rad.\n\nΔlon = lon2 - lon1 = (-0.3146) - (-1.9256) = 1.6110 rad.\n\nCompute a = sin²(Δlat/2) + cos(lat1)*cos(lat2)*sin²(Δlon/2).\n\nΔlat/2 = -0.1561 rad. sin(-0.1561) ≈ -0.1554. sin² = 0.0241.\n\nΔlon/2 = 0.8055 rad. sin(0.8055) ≈ 0.720. sin² = 0.5184.\n\ncos(lat1) = cos(-1.0867) = cos(1.0867) ≈ 0.468? Let's compute: cos(1.0867) ~ 0.468. cos(lat2) = cos(-1.3989) = cos(1.3989) ≈ 0.169? Let's compute: cos(1.3989) ~ 0.169. Multiply: 0.468*0.169 = 0.0791.\n\nNow a = 0.0241 + 0.0791 * 0.5184 = 0.0241 + 0.0410 = 0.0651.\n\nc = 2 * atan2( sqrt(a), sqrt(1-a) ). sqrt(a) = sqrt(0.0651) = 0.2553. sqrt(1-a) = sqrt(0.9349) = 0.9670. atan2(0.2553, 0.9670) = 0.257? Let's compute: arctan(0.2553/0.9670) = arctan(0.264) ≈ 0.257 rad. Multiply by 2: c ≈ 0.514 rad.\n\nDistance = R * c. R Earth radius ~ 6371 km. So distance = 6371 * 0.514 = 3275 km. Let's compute:"}]
>> NUMERIC CANDIDATES (value [unit_raw] -> km/mi/nmi)
  169.0  [-]  ->  km:169.000000, mi:271.979136, nmi:312.988000
  468.0  [-]  ->  km:468.000000, mi:753.172992, nmi:866.736000
  169.0  [-]  ->  km:169.000000, mi:271.979136, nmi:312.988000
  468.0  [-]  ->  km:468.000000, mi:753.172992, nmi:866.736000
  0.967  [-]  ->  km:0.967000, mi:1.556236, nmi:1.790884
  0.0791  [-]  ->  km:0.079100, mi:0.127299, nmi:0.146493
  1.3989  [-]  ->  km:1.398900, mi:2.251311, nmi:2.590763
  1.3989  [-]  ->  km:1.398900, mi:2.251311, nmi:2.590763
  2.0  [-]  ->  km:2.000000, mi:3.218688, nmi:3.704000
  1.0867  [-]  ->  km:1.086700, mi:1.748874, nmi:2.012568
>> DECISION TRACE (winning candidate)
  value=169.0  unit_raw=None  unit_norm=None
  assumed_unit=nmi  parsed_km=312.988
  score=7  breakdown={'near_keyword': 3, 'finalish': 2, 'tail_bias': 2}  span=[2030,2035]
  context=...e: cos(1.3989) ~ 0.169. Multiply: 0.468*0.169 = 0.0791.\n\nNow a = 0.0241 + 0.0791 * ...
>> DECISION & SCORE
expected_km=3305.616157264437
parsed_raw: 169.0 [—]  explicit_norm=—
assumed_unit=nmi  parsed_km=312.988  rel_error=90.53%
flags={'near_keyword': True, 'radius_context': False}  analysis_fallback_used=False
context: ...e: cos(1.3989) ~ 0.169. Multiply: 0.468*0.169 = 0.0791.\n\nNow a = 0.0241 + 0.0791 * ...
bucket=wrong  points=0
-- batch generation time: 33.93s

BATCH 4/20  rows 3..3
Generation kwargs: {"max_new_tokens": 1000, "do_sample": false}

════════════════════════════════════════════════════════════════════════════════
SAMPLE 4/20  (batch 3-3)
────────────────────────────────────────────────────────────────────────────────
>> MESSAGES SENT
[DEVELOPER] you are an agent that understands GPS and can calculate distances
[USER] 43° 58′ 3.74″ , 149° 16′ 39.36″ W -> 15° 51′ 31.68″ N   58° 49′ 52.77″ E in nm?
────────────────────────────────────────────────────────────────────────────────
>> RAW PIPELINE OUTPUT
[{"role": "system", …
>> EXTRACTED ANALYSIS TEXT
(none)
>> EXTRACTED FINAL TEXT
[{"role": "system", "content": "you are an agent that understands GPS and can calculate distances"}, {"role": "user", "content": "43° 58′ 3.74″ , 149° 16′ 39.36″ W -> 15° 51′ 31.68″ N   58° 49′ 52.77″ E in nm?"}, {"role": "assistant", "content": "analysisWe need to compute great-circle distance between two coordinates: first point: 43° 58′ 3.74″ N, 149° 16′ 39.36″ W. Second point: 15° 51′ 31.68″ N, 58° 49′ 52.77″ E. Convert to decimal degrees: first lat = 43 + 58/60 + 3.74/3600 = 43 + 0.9666667 + 0.0010389 = 43.9677056 N. lon = -(149 + 16/60 + 39.36/3600) = -(149 + 0.2666667 + 0.0109333) = -149.2776 W. Second lat = 15 + 51/60 + 31.68/3600 = 15 + 0.85 + 0.0088 = 15.8588 N. lon = 58 + 49/60 + 52.77/3600 = 58 + 0.8166667 + 0.014675 = 58.831342 E.\n\nNow compute great-circle distance using haversine formula. Earth's radius: 3440.065 nm (mean radius in nautical miles). Let's compute.\n\nCompute Δlat = lat2 - lat1 = 15.8588 - 43.9677056 = -28.1089056 degrees. Δlon = lon2 - lon1 = 58.831342 - (-149.2776) = 208.108942 degrees.\n\nConvert to radians: 1 deg = π/180 rad.\n\nlat1 rad = 43.9677056 * π/180 = 0.7675 rad? Let's compute: 43.9677 * 0.01745329252 = 0.7675 rad. lat2 rad = 15.8588 * 0.01745329252 = 0.2767 rad. Δlat rad = -28.1089056 * 0.01745329252 = -0.4907 rad. Δlon rad = 208.108942 * 0.01745329252 = 3.6310 rad.\n\nNow haversine: a = sin²(Δlat/2) + cos(lat1)*cos(lat2)*sin²(Δlon/2). Compute:\n\nΔlat/2 = -0.24535 rad. sin² = sin(-0.24535)^2. sin(-0.24535) = -0.2428. Square = 0.0589.\n\ncos(lat1) = cos(0.7675) = 0.719. cos(lat2) = cos(0.2767) = 0.962. sin(Δlon/2) = sin(3.6310/2) = sin(1.8155) = sin(1.8155) ~ 0.969. Square = 0.939.\n\nNow a = 0.0589 + 0.719*0.962*0.939 = 0.0589 + 0.719*0.962*0.939. Compute 0.719*0.962 = 0.692. Multiply by 0.939 = 0.649. So a = 0.0589 + 0.649 = 0.7079.\n\nc = 2*atan2( sqrt(a), sqrt(1-a) ). sqrt(a) = sqrt(0.7079) = 0.841. sqrt(1-a) = sqrt(0.2921) = 0.540. atan2(0.841,0.540) =? Let's compute: ratio 0.841/0.540 = 1.558. atan(1.558) ~ 1.003 rad? Actually arctan(1.558) ~ 1.003 rad. So c = 2*1.003 = 2.006 rad.\n\nDistance = R * c = 3440.065 * 2.006 = 6899.9 nm. Let's compute precisely: 3440.065 * 2.006 = 3440.065*2 + 3440.065*0.006 = 6880.13 + 20.64039 = 6900.77 nm. So about 6901 nautical miles.\n\nWe can double-check with more accurate calculation. Let's compute using more precise values.\n\nCompute lat1 rad: 43.9677056 * π/180. 43.9677056/180 = 0.244, times π = 0.7675 rad. lat2 rad: 15.8588/"}]
>> NUMERIC CANDIDATES (value [unit_raw] -> km/mi/nmi)
  6901.0  [nautical miles]  ->  km:6901.000000, mi:11106.082944, nmi:12780.652000
  6900.77  [nm]  ->  km:6900.770000, mi:11105.712795, nmi:12780.226040
  20.64039  [-]  ->  km:20.640390, mi:33.217488, nmi:38.226002
  540.0  [-]  ->  km:540.000000, mi:869.045760, nmi:1000.080000
  939.0  [-]  ->  km:939.000000, mi:1511.174016, nmi:1739.028000
  969.0  [-]  ->  km:969.000000, mi:1559.454336, nmi:1794.588000
  0.0589  [-]  ->  km:0.058900, mi:0.094790, nmi:0.109083
  1.8155  [-]  ->  km:1.815500, mi:2.921764, nmi:3.362306
  1.8155  [-]  ->  km:1.815500, mi:2.921764, nmi:3.362306
  2.0  [-]  ->  km:2.000000, mi:3.218688, nmi:3.704000
>> DECISION TRACE (winning candidate)
  value=6901.0  unit_raw='nautical miles'  unit_norm='nmi'
  assumed_unit=nmi  parsed_km=12780.652
  score=12  breakdown={'unit_bonus': 5, 'near_keyword': 3, 'finalish': 2, 'tail_bias': 2}  span=[2235,2254]
  context=...80.13 + 20.64039 = 6900.77 nm. So about 6901 nautical miles.\n\nWe can double-check with more accur...
>> DECISION & SCORE
expected_km=12775.79193241549
parsed_raw: 6901.0 [nautical miles]  explicit_norm=nmi
assumed_unit=nmi  parsed_km=12780.652  rel_error=0.04%
flags={'near_keyword': True, 'radius_context': False}  analysis_fallback_used=False
context: ...80.13 + 20.64039 = 6900.77 nm. So about 6901 nautical miles.\n\nWe can double-check with more accur...
bucket=perfect  points=10
-- batch generation time: 33.80s

BATCH 5/20  rows 4..4
Generation kwargs: {"max_new_tokens": 1000, "do_sample": false}

════════════════════════════════════════════════════════════════════════════════
SAMPLE 5/20  (batch 4-4)
────────────────────────────────────────────────────────────────────────────────
>> MESSAGES SENT
[DEVELOPER] you are an agent that understands GPS and can calculate distances
[USER] DISTANCE??? -74.450535   79.562254 -34.153080, -102.474364 (MI)
────────────────────────────────────────────────────────────────────────────────
>> RAW PIPELINE OUTPUT
[{"role": "system", …
>> EXTRACTED ANALYSIS TEXT
(none)
>> EXTRACTED FINAL TEXT
Distance between the two points**\n\n| Point | Latitude (°) | Longitude (°) |\n|-------|--------------|---------------|\n| A | –74.450535 | 79.562254 |\n| B | –34.153080 | –102.474364 |\n\nUsing the haversine formula (great‑circle distance on a sphere) the separation is:\n\n* **≈ 8 000 km**  \n* **≈ 4 975 mi** (rounded to the nearest mile)\n\nSo the two locations are roughly **5 000 miles** apart."}]
>> NUMERIC CANDIDATES (value [unit_raw] -> km/mi/nmi)
  5000.0  [mi]  ->  km:5000.000000, mi:8046.720000, nmi:9260.000000
  4975.0  [mi]  ->  km:4975.000000, mi:8006.486400, nmi:9213.700000
  8000.0  [km]  ->  km:8000.000000, mi:12874.752000, nmi:14816.000000
  102.474364  [-]  ->  km:102.474364, mi:164.916503, nmi:189.782522
  34.15308  [-]  ->  km:34.153080, mi:54.964054, nmi:63.251504
  79.562254  [-]  ->  km:79.562254, mi:128.043036, nmi:147.349294
  74.450535  [-]  ->  km:74.450535, mi:119.816522, nmi:137.882391
>> DECISION TRACE (winning candidate)
  value=5000.0  unit_raw='mi'  unit_norm='mi'
  assumed_unit=mi  parsed_km=8046.72
  score=12  breakdown={'unit_bonus': 5, 'near_keyword': 3, 'finalish': 2, 'tail_bias': 2}  span=[380,388]
  context=...)\n\nSo the two locations are roughly **5 000 miles** apart."}]...
>> DECISION & SCORE
expected_km=7937.984776268067
parsed_raw: 5000.0 [mi]  explicit_norm=mi
assumed_unit=mi  parsed_km=8046.72  rel_error=1.37%
flags={'near_keyword': True, 'radius_context': False}  analysis_fallback_used=False
context: ...)\n\nSo the two locations are roughly **5 000 miles** apart."}]...
bucket=approx  points=3
-- batch generation time: 28.48s

BATCH 6/20  rows 5..5
Generation kwargs: {"max_new_tokens": 1000, "do_sample": false}

════════════════════════════════════════════════════════════════════════════════
SAMPLE 6/20  (batch 5-5)
────────────────────────────────────────────────────────────────────────────────
>> MESSAGES SENT
[DEVELOPER] you are an agent that understands GPS and can calculate distances
[USER] 15° 17′ 48.81″ N  ,  63° 49′ 30.05″ W 41 5′ 41.48″ S, 70 36′ 9.64″ W
────────────────────────────────────────────────────────────────────────────────
>> RAW PIPELINE OUTPUT
[{"role": "system", …
>> EXTRACTED ANALYSIS TEXT
(none)
>> EXTRACTED FINAL TEXT
Distance between the two points**\n\n| Point | Latitude (° min sec) | Longitude (° min sec) | Decimal degrees (lat, lon) |\n|-------|----------------------|-----------------------|-----------------------------|\n| 1 | 15° 17′ 48.81″ N | 63° 49′ 30.05″ W | 15.296883°, ‑63.825014° |\n| 2 | 41° 5′ 41.48″ S | 70° 36′ 9.64″ W | ‑41.094844°, ‑70.602677° |\n\nUsing the haversine formula (Earth radius = 6 371 km):\n\n1. Δlat = ‑56.391727° = ‑0.9845 rad  \n2. Δlon = ‑6."}]
>> NUMERIC CANDIDATES (value [unit_raw] -> km/mi/nmi)
  6371.0  [km]  ->  km:6371.000000, mi:10253.130624, nmi:11799.092000
  70.602677  [-]  ->  km:70.602677, mi:113.623995, nmi:130.756158
  41.094844  [-]  ->  km:41.094844, mi:66.135741, nmi:76.107651
  9.64  [-]  ->  km:9.640000, mi:15.514076, nmi:17.853280
  36.0  [-]  ->  km:36.000000, mi:57.936384, nmi:66.672000
  70.0  [-]  ->  km:70.000000, mi:112.654080, nmi:129.640000
  41.48  [-]  ->  km:41.480000, mi:66.755589, nmi:76.820960
  5.0  [-]  ->  km:5.000000, mi:8.046720, nmi:9.260000
  41.0  [-]  ->  km:41.000000, mi:65.983104, nmi:75.932000
  63.825014  [-]  ->  km:63.825014, mi:102.716403, nmi:118.203926
>> DECISION TRACE (winning candidate)
  value=6371.0  unit_raw='km'  unit_norm='km'
  assumed_unit=km  parsed_km=6371.0
  score=0  breakdown={'unit_bonus': 5, 'near_keyword': 3, 'tail_bias': 2, 'math_penalty': -4, 'radius_penalty': -6}  span=[399,407]
  context=...g the haversine formula (Earth radius = 6 371 km):\n\n1. Δlat = ‑56.391727° = ‑0.9845 ra...
>> DECISION & SCORE
expected_km=6309.267513587849
parsed_raw: 6371.0 [km]  explicit_norm=km
assumed_unit=km  parsed_km=6371.0  rel_error=0.98%
flags={'near_keyword': True, 'radius_context': True}  analysis_fallback_used=False
context: ...g the haversine formula (Earth radius = 6 371 km):\n\n1. Δlat = ‑56.391727° = ‑0.9845 ra...
bucket=perfect  points=10
-- batch generation time: 33.93s

BATCH 7/20  rows 6..6
Generation kwargs: {"max_new_tokens": 1000, "do_sample": false}

════════════════════════════════════════════════════════════════════════════════
SAMPLE 7/20  (batch 6-6)
────────────────────────────────────────────────────────────────────────────────
>> MESSAGES SENT
[DEVELOPER] you are an agent that understands GPS and can calculate distances
[USER] how far from 63° 4.833′ N, 41° 59.478′ W to 50° 43.259’ , 119° 44.597’ E in n.m.?
────────────────────────────────────────────────────────────────────────────────
>> RAW PIPELINE OUTPUT
[{"role": "system", …
>> EXTRACTED ANALYSIS TEXT
(none)
>> EXTRACTED FINAL TEXT
[{"role": "system", "content": "you are an agent that understands GPS and can calculate distances"}, {"role": "user", "content": "how far from 63° 4.833′ N, 41° 59.478′ W to 50° 43.259’ , 119° 44.597’ E in n.m.?"}, {"role": "assistant", "content": "analysisWe need to compute great-circle distance between two coordinates: first: 63° 4.833′ N, 41° 59.478′ W. Second: 50° 43.259′ N, 119° 44.597′ E. Wait second coordinate: 50° 43.259’ (likely N) and 119° 44.597’ E. So both latitudes are north. Longitudes: first is west, second is east. So difference in longitude is about 161 degrees? Actually 41° 59.478′ W to 119° 44.597′ E. Convert to degrees: 41.9903° W, 119.7433° E. The difference across the 180° meridian: 41.9903° W is -41.9903°, 119.7433° E is +119.7433°. The difference in longitude = 119.7433 - (-41.9903) = 161.7336°. So the central angle between them can be computed using haversine formula. Let's compute.\n\nCoordinates:\n\nlat1 = 63° 4.833′ N = 63 + 4.833/60 = 63 + 0.08055 = 63.08055° N. Convert to radians: 63.08055 * π/180 = 1.1015 rad approx.\n\nlon1 = -41° 59.478′ = -41 - 59.478/60 = -41 - 0.9903 = -41.9903° = -0.7328 rad.\n\nlat2 = 50° 43.259′ N = 50 + 43.259/60 = 50 + 0.721983 = 50.721983° N. rad: 50.721983 * π/180 = 0.8855 rad.\n\nlon2 = 119° 44.597′ E = 119 + 44.597/60 = 119 + 0.743283 = 119.743283° E. rad: 119.743283 * π/180 = 2.0905 rad.\n\nNow compute haversine:\n\nΔφ = lat2 - lat1 = 0.8855 - 1.1015 = -0.2160 rad.\n\nΔλ = lon2 - lon1 = 2.0905 - (-0.7328) = 2.8233 rad.\n\nCompute a = sin²(Δφ/2) + cos(lat1)*cos(lat2)*sin²(Δλ/2).\n\nCompute sin(Δφ/2) = sin(-0.1080) = -0.1078. Square: 0.0116.\n\ncos(lat1) = cos(1.1015) = 0.4535.\n\ncos(lat2) = cos(0.8855) = 0.6325.\n\nsin(Δλ/2) = sin(1.41165) = sin(1.41165) ~ 0.9875? Let's compute: sin(1.41165 rad) = 0.9875 (approx). Square: 0.9751.\n\nNow a = 0.0116 + 0.4535*0.6325*0.9751 = 0.0116 + 0.4535*0.6325 = 0.2868? Wait multiply: 0.4535*0.6325 = 0.2868. Then times 0.9751 = 0.2795. Add 0.0116 = 0.2911.\n\nNow c = 2*atan2( sqrt(a), sqrt(1-a) ). sqrt(a) = sqrt(0.2911) = 0.5395. sqrt(1-a) = sqrt(0.7089) = 0.8423. atan2(0.5395,0.8423) = 0.571 rad? Let's compute: arctan(0.5395/0.8423)= arctan(0.640) = 0.571 rad. Multiply by 2: c = 1.142 rad.\n\nNow distance = R * c. R = Earth's radius. For nautical miles, use R = 3440.065 nm (mean radius). So distance = 3440.065 * 1.142 = 3928 nm approx. Let's compute: 3440.065*1.142 = 3928.9 nm.\n\nThus answer: about 3,929 nautical miles.\n\nWe can provide more precise: 3,929 nm.\n\nCheck if any rounding: maybe 3,930 nm.\n\nLet's"}]
>> NUMERIC CANDIDATES (value [unit_raw] -> km/mi/nmi)
  3929.0  [nautical miles]  ->  km:3929.000000, mi:6323.112576, nmi:7276.508000
  3928.9  [nm]  ->  km:3928.900000, mi:6322.951642, nmi:7276.322800
  3929.0  [nm]  ->  km:3929.000000, mi:6323.112576, nmi:7276.508000
  1142.0  [-]  ->  km:1142.000000, mi:1837.870848, nmi:2114.984000
  1.41165  [-]  ->  km:1.411650, mi:2.271830, nmi:2.614376
  1.41165  [-]  ->  km:1.411650, mi:2.271830, nmi:2.614376
  2.0  [-]  ->  km:2.000000, mi:3.218688, nmi:3.704000
  3928.0  [nm]  ->  km:3928.000000, mi:6321.503232, nmi:7274.656000
  0.9751  [-]  ->  km:0.975100, mi:1.569271, nmi:1.805885
  0.6325  [-]  ->  km:0.632500, mi:1.017910, nmi:1.171390
>> DECISION TRACE (winning candidate)
  value=3929.0  unit_raw='nautical miles'  unit_norm='nmi'
  assumed_unit=nmi  parsed_km=7276.508000000001
  score=12  breakdown={'unit_bonus': 5, 'near_keyword': 3, 'finalish': 2, 'tail_bias': 2}  span=[2440,2460]
  context=....142 = 3928.9 nm.\n\nThus answer: about 3,929 nautical miles.\n\nWe can provide more precise: 3,929 ...
>> DECISION & SCORE
expected_km=18262.070386577147
parsed_raw: 3929.0 [nautical miles]  explicit_norm=nmi
assumed_unit=nmi  parsed_km=7276.508000000001  rel_error=60.16%
flags={'near_keyword': True, 'radius_context': False}  analysis_fallback_used=False
context: ....142 = 3928.9 nm.\n\nThus answer: about 3,929 nautical miles.\n\nWe can provide more precise: 3,929 ...
bucket=wrong  points=0
-- batch generation time: 33.91s

BATCH 8/20  rows 7..7
Generation kwargs: {"max_new_tokens": 1000, "do_sample": false}

════════════════════════════════════════════════════════════════════════════════
SAMPLE 8/20  (batch 7-7)
────────────────────────────────────────────────────────────────────────────────
>> MESSAGES SENT
[DEVELOPER] you are an agent that understands GPS and can calculate distances
[USER] DISTANCE??? 8° 41′ 49.67″ N, 46° 43′ 4.16″ W 78 deg 18′ 39.55 S,1 deg 11′ 39.48 E (sea miles)
────────────────────────────────────────────────────────────────────────────────
>> RAW PIPELINE OUTPUT
[{"role": "system", …
>> EXTRACTED ANALYSIS TEXT
(none)
>> EXTRACTED FINAL TEXT
[{"role": "system", "content": "you are an agent that understands GPS and can calculate distances"}, {"role": "user", "content": "DISTANCE??? 8° 41′ 49.67″ N, 46° 43′ 4.16″ W 78 deg 18′ 39.55 S,1 deg 11′ 39.48 E (sea miles)"}, {"role": "assistant", "content": "analysisThe user says: \"DISTANCE??? 8° 41′ 49.67″ N, 46° 43′ 4.16″ W 78 deg 18′ 39.55 S,1 deg 11′ 39.48 E (sea miles)\". They want the distance between two coordinates: first coordinate: 8° 41′ 49.67″ N, 46° 43′ 4.16″ W. Second coordinate: 78° 18′ 39.55 S, 1° 11′ 39.48 E. They want the distance in sea miles. We need to compute great-circle distance. Use haversine formula. Let's compute approximate.\n\nFirst convert to decimal degrees:\n\nPoint A: lat1 = 8 + 41/60 + 49.67/3600. 41/60 = 0.6833333. 49.67/3600 = 0.0138056. Sum: 8 + 0.6833333 + 0.0138056 = 8.6971389° N.\n\nlon1 = -(46 + 43/60 + 4.16/3600). 43/60 = 0.7166667. 4.16/3600 = 0.0011556. Sum: 46 + 0.7166667 + 0.0011556 = 46.7178223° W. So lon1 = -46.7178223°.\n\nPoint B: lat2 = -(78 + 18/60 + 39.55/3600). 18/60 = 0.3. 39.55/3600 = 0.0109861. Sum: 78 + 0.3 + 0.0109861 = 78.3109861°. So lat2 = -78.3109861°.\n\nlon2 = 1 + 11/60 + 39.48/3600. 11/60 = 0.1833333. 39.48/3600 = 0.0109667. Sum: 1 + 0.1833333 + 0.0109667 = 1.1943°. So lon2 = +1.1943°.\n\nNow compute haversine. Convert to radians: multiply by pi/180.\n\nlat1_rad = 8.6971389 * pi/180 = 0.1518 rad approx. Let's compute precisely: 8.6971389 * 0.01745329252 = 0.1518 rad.\n\nlat2_rad = -78.3109861 * 0.01745329252 = -1.3675 rad.\n\nlon1_rad = -46.7178223 * 0.01745329252 = -0.8153 rad.\n\nlon2_rad = 1.1943 * 0.01745329252 = 0.02084 rad.\n\nCompute delta lat = lat2 - lat1 = -1.3675 - 0.1518 = -1.5193 rad.\n\nDelta lon = lon2 - lon1 = 0.02084 - (-0.8153) = 0.83614 rad.\n\nNow haversine: a = sin^2(delta_lat/2) + cos(lat1)*cos(lat2)*sin^2(delta_lon/2).\n\nCompute sin(delta_lat/2) = sin(-0.75965) = -0.688? Let's compute: sin(-0.75965) = -0.688. Square: 0.473.\n\ncos(lat1) = cos(0.1518) = 0.9885. cos(lat2) = cos(-1.3675) = cos(1.3675) = 0.203? Let's compute: cos(1.3675) ~ 0.203. Multiply: 0.9885*0.203 = 0.2007.\n\nsin(delta_lon/2) = sin(0.41807) = 0.406. Square: 0.1648.\n\nSo second term: 0.2007 * 0.1648 = 0.0331.\n\nAdd to first term: 0.473 + 0.0331 = 0.5061.\n\nNow c = 2 * atan2(sqrt(a), sqrt(1-a)). sqrt(a) = sqrt(0.5061) = 0.7115. sqrt(1-a) = sqrt(0.4939) = 0.7026. atan2(0.7115,0.7026) = about 0.785? Let's compute: ratio ~1.013. atan2"}]
>> NUMERIC CANDIDATES (value [unit_raw] -> km/mi/nmi)
  203.0  [-]  ->  km:203.000000, mi:326.696832, nmi:375.956000
  203.0  [-]  ->  km:203.000000, mi:326.696832, nmi:375.956000
  2.0  [-]  ->  km:2.000000, mi:3.218688, nmi:3.704000
  0.7026  [-]  ->  km:0.702600, mi:1.130725, nmi:1.301215
  0.2007  [-]  ->  km:0.200700, mi:0.322995, nmi:0.371696
  0.9885  [-]  ->  km:0.988500, mi:1.590837, nmi:1.830702
  406.0  [-]  ->  km:406.000000, mi:653.393664, nmi:751.912000
  0.4939  [-]  ->  km:0.493900, mi:0.794855, nmi:0.914703
  1.0  [-]  ->  km:1.000000, mi:1.609344, nmi:1.852000
  0.7115  [-]  ->  km:0.711500, mi:1.145048, nmi:1.317698
>> DECISION TRACE (winning candidate)
  value=203.0  unit_raw=None  unit_norm=None
  assumed_unit=nmi  parsed_km=375.956
  score=7  breakdown={'near_keyword': 3, 'finalish': 2, 'tail_bias': 2}  span=[2087,2092]
  context=...: cos(1.3675) ~ 0.203. Multiply: 0.9885*0.203 = 0.2007.\n\nsin(delta_lon/2) = sin(0.4...
>> DECISION & SCORE
expected_km=10095.738602333031
parsed_raw: 203.0 [—]  explicit_norm=—
assumed_unit=nmi  parsed_km=375.956  rel_error=96.28%
flags={'near_keyword': True, 'radius_context': False}  analysis_fallback_used=False
context: ...: cos(1.3675) ~ 0.203. Multiply: 0.9885*0.203 = 0.2007.\n\nsin(delta_lon/2) = sin(0.4...
bucket=wrong  points=0
-- batch generation time: 33.88s

BATCH 9/20  rows 8..8
Generation kwargs: {"max_new_tokens": 1000, "do_sample": false}

════════════════════════════════════════════════════════════════════════════════
SAMPLE 9/20  (batch 8-8)
────────────────────────────────────────────────────────────────────────────────
>> MESSAGES SENT
[DEVELOPER] you are an agent that understands GPS and can calculate distances
[USER] how far from 17 °34′ 25.59″ S  ,  135 °53′ 38.47″ W to 36° 19′ 9.62″ N 152° 50′ 34.97″ E in Mi?
────────────────────────────────────────────────────────────────────────────────
>> RAW PIPELINE OUTPUT
[{"role": "system", …
>> EXTRACTED ANALYSIS TEXT
(none)
>> EXTRACTED FINAL TEXT
[{"role": "system", "content": "you are an agent that understands GPS and can calculate distances"}, {"role": "user", "content": "how far from 17 °34′ 25.59″ S  ,  135 °53′ 38.47″ W to 36° 19′ 9.62″ N 152° 50′ 34.97″ E in Mi?"}, {"role": "assistant", "content": "analysisWe need to compute distance between two coordinates: first: 17°34′25.59″ S, 135°53′38.47″ W. Second: 36°19′9.62″ N, 152°50′34.97″ E. We need distance in miles. Use haversine formula. Let's compute approximate.\n\nFirst convert to decimal degrees.\n\nPoint A: lat = -17 - 34/60 - 25.59/3600. 34/60=0.5666667. 25.59/3600=0.0071083. Sum: 17 + 0.5666667 + 0.0071083 = 17.573775. So latA = -17.573775°.\n\nLonA: 135 + 53/60 + 38.47/3600. 53/60=0.8833333. 38.47/3600=0.0106928. Sum: 135 + 0.8833333 + 0.0106928 = 135.8940261. Since West, lonA = -135.8940261°.\n\nPoint B: latB = 36 + 19/60 + 9.62/3600. 19/60=0.3166667. 9.62/3600=0.0026722. Sum: 36 + 0.3166667 + 0.0026722 = 36.3193389°. lonB = 152 + 50/60 + 34.97/3600. 50/60=0.8333333. 34.97/3600=0.0097047. Sum: 152 + 0.8333333 + 0.0097047 = 152.8430380°. East positive.\n\nNow compute haversine. Use Earth radius: 6371 km or 3958.8 miles. We'll compute in miles.\n\nCompute delta lat = latB - latA = 36.3193389 - (-17.573775) = 53.8931139° in radians: 53.8931139 * π/180 = 0.9405 rad approx.\n\nDelta lon = lonB - lonA = 152.8430380 - (-135.8940261) = 288.7370641° in radians: 288.7370641 * π/180 = 5.0385 rad. But we can use sin^2(delta_lon/2). However note that delta_lon > 180°, but haversine works with any difference; but we can also reduce to 360-... but it's fine.\n\nCompute haversine formula: a = sin^2(dlat/2) + cos(latA)*cos(latB)*sin^2(dlon/2). Then c = 2*atan2(sqrt(a), sqrt(1-a)). Distance = R * c.\n\nLet's compute step by step.\n\nFirst convert latitudes to radians:\n\nlatA_rad = -17.573775 * π/180 = -0.3068 rad approx. Let's compute precisely: 17.573775/180=0.09768125. times π=0.3068 rad. Negative.\n\nlatB_rad = 36.3193389 * π/180 = 0.6343 rad approx. 36.3193389/180=0.2017; times π=0.6343.\n\nNow dlat_rad = 0.9405 rad.\n\ndlon_rad = 5.0385 rad.\n\nCompute sin(dlat/2) = sin(0.47025) ≈ 0.4535. Square: 0.2057.\n\nCompute sin(dlon/2) = sin(2.51925) rad. 2.51925 rad ~ 144.3°. sin(144.3°) = sin(180-144.3)=sin(35.7°)=0.585. But sign? sin(144.3°) positive. So sin=0.585. Square: 0.342.\n\nCompute cos(latA) = cos(-0.3068)=0.9530. cos(latB)=cos(0.6343)=0.8045.\n\nNow a = 0.2057 + 0.9530*0.8045*0.342.\n\nCompute product: 0.9530*0.8045=0.767. times 0.342 = 0.262. So a = 0.2057 + 0.262 = 0.4677.\n\nNow c = 2*atan2(sqrt(a), sqrt(1-a)). sqrt(a)=sqrt("}]
>> NUMERIC CANDIDATES (value [unit_raw] -> km/mi/nmi)
  0.2057  [-]  ->  km:0.205700, mi:0.331042, nmi:0.380956
  0.4535  [-]  ->  km:0.453500, mi:0.729838, nmi:0.839882
  0.47025  [-]  ->  km:0.470250, mi:0.756794, nmi:0.870903
  1.0  [-]  ->  km:1.000000, mi:1.609344, nmi:1.852000
  2.0  [-]  ->  km:2.000000, mi:3.218688, nmi:3.704000
  2.0  [-]  ->  km:2.000000, mi:3.218688, nmi:3.704000
  2.0  [-]  ->  km:2.000000, mi:3.218688, nmi:3.704000
  2.0  [-]  ->  km:2.000000, mi:3.218688, nmi:3.704000
  17.573775  [-]  ->  km:17.573775, mi:28.282249, nmi:32.546631
  36.3193389  [-]  ->  km:36.319339, mi:58.450310, nmi:67.263416
>> DECISION TRACE (winning candidate)
  value=0.2057  unit_raw=None  unit_norm=None
  assumed_unit=nmi  parsed_km=0.38095640000000003
  score=6  breakdown={'near_keyword': 3, 'finalish': 2, 'tail_bias': 2, 'tiny_penalty': -1}  span=[2143,2149]
  context=...lat/2) = sin(0.47025) ≈ 0.4535. Square: 0.2057.\n\nCompute sin(dlon/2) = sin(2.51925) ...
>> DECISION & SCORE
expected_km=9574.565858325237
parsed_raw: 0.2057 [—]  explicit_norm=—
assumed_unit=nmi  parsed_km=0.38095640000000003  rel_error=100.00%
flags={'near_keyword': True, 'radius_context': False}  analysis_fallback_used=False
context: ...lat/2) = sin(0.47025) ≈ 0.4535. Square: 0.2057.\n\nCompute sin(dlon/2) = sin(2.51925) ...
bucket=wrong  points=0
-- batch generation time: 33.90s

BATCH 10/20  rows 9..9
Generation kwargs: {"max_new_tokens": 1000, "do_sample": false}

════════════════════════════════════════════════════════════════════════════════
SAMPLE 10/20  (batch 9-9)
────────────────────────────────────────────────────────────────────────────────
>> MESSAGES SENT
[DEVELOPER] you are an agent that understands GPS and can calculate distances
[USER] DISTANCE??? 48° 59′ 25.78″ N,43° 13′ 3.42″ E 38° 29' 44.48" N, 139° 56' 58.34" E (Km)
────────────────────────────────────────────────────────────────────────────────
>> RAW PIPELINE OUTPUT
[{"role": "system", …
>> EXTRACTED ANALYSIS TEXT
(none)
>> EXTRACTED FINAL TEXT
[{"role": "system", "content": "you are an agent that understands GPS and can calculate distances"}, {"role": "user", "content": "DISTANCE??? 48° 59′ 25.78″ N,43° 13′ 3.42″ E 38° 29' 44.48\" N, 139° 56' 58.34\" E (Km)"}, {"role": "assistant", "content": "analysisWe need to compute distance between two coordinates: (48° 59′ 25.78″ N, 43° 13′ 3.42″ E) and (38° 29' 44.48\" N, 139° 56' 58.34\" E). These are lat/long in degrees minutes seconds. We need to compute great-circle distance in km. Use haversine formula. Let's convert to decimal degrees.\n\nFirst coordinate: lat1 = 48 + 59/60 + 25.78/3600. 59/60 = 0.9833333. 25.78/3600 = 0.0071611. Sum: 48 + 0.9833333 + 0.0071611 = 48.9904944 approx. lon1 = 43 + 13/60 + 3.42/3600. 13/60 = 0.2166667. 3.42/3600 = 0.00095. Sum: 43 + 0.2166667 + 0.00095 = 43.2176167.\n\nSecond coordinate: lat2 = 38 + 29/60 + 44.48/3600. 29/60 = 0.4833333. 44.48/3600 = 0.0123556. Sum: 38 + 0.4833333 + 0.0123556 = 38.4956889. lon2 = 139 + 56/60 + 58.34/3600. 56/60 = 0.9333333. 58.34/3600 = 0.0162056. Sum: 139 + 0.9333333 + 0.0162056 = 139.9495389.\n\nNow compute haversine. Convert to radians: lat1 rad = 48.9904944 * pi/180. Let's compute approximate: 48.9904944 * 0.01745329252 = 0.855... Let's compute precisely: 48.9904944 * 0.01745329252 = 0.855... 48*0.01745329252 = 0.837758. 0.9904944*0.01745329252 = 0.017285. Sum = 0.855043. So lat1 rad ≈ 0.855043 rad.\n\nlon1 rad = 43.2176167 * 0.01745329252 = 0.754... 43*0.01745329252 = 0.750492. 0.2176167*0.01745329252 = 0.003797. Sum = 0.754289 rad.\n\nlat2 rad = 38.4956889 * 0.01745329252 = 0.672... 38*0.01745329252 = 0.663225. 0.4956889*0.01745329252 = 0.008653. Sum = 0.671878 rad.\n\nlon2 rad = 139.9495389 * 0.01745329252 = 2.441... 139*0.01745329252 = 2.426... 0.9495389*0.01745329252 = 0.01657. Sum = 2.44257 rad.\n\nNow compute differences: dlat = lat2 - lat1 = 0.671878 - 0.855043 = -0.183165 rad. dlon = lon2 - lon1 = 2.44257 - 0.754289 = 1.688281 rad.\n\nCompute haversine: a = sin²(dlat/2) + cos(lat1)*cos(lat2)*sin²(dlon/2).\n\nCompute sin(dlat/2): dlat/2 = -0.0915825. sin(-0.0915825) ≈ -0.0915. Square: 0.00837.\n\nCompute sin(dlon/2): dlon/2 = 0.8441405. sin(0.8441405) ≈ 0.747. Square: 0.558.\n\nCompute cos(lat1) = cos(0.855043) ≈ 0.655. cos(lat2) = cos(0.671878) ≈ 0.781.\n\nNow a = 0.00837 + 0.655*0.781*0.558. 0.655*0.781 = 0.511. 0.511*0.558 = 0.285. Sum a = 0.2934.\n\nNow c"}]
>> NUMERIC CANDIDATES (value [unit_raw] -> km/mi/nmi)
  781.0  [-]  ->  km:781.000000, mi:1256.897664, nmi:1446.412000
  655.0  [-]  ->  km:655.000000, mi:1054.120320, nmi:1213.060000
  781.0  [-]  ->  km:781.000000, mi:1256.897664, nmi:1446.412000
  655.0  [-]  ->  km:655.000000, mi:1054.120320, nmi:1213.060000
  558.0  [-]  ->  km:558.000000, mi:898.013952, nmi:1033.416000
  747.0  [-]  ->  km:747.000000, mi:1202.179968, nmi:1383.444000
  0.00837  [-]  ->  km:0.008370, mi:0.013470, nmi:0.015501
  0.671878  [-]  ->  km:0.671878, mi:1.081283, nmi:1.244318
  2.0  [-]  ->  km:2.000000, mi:3.218688, nmi:3.704000
  0.855043  [-]  ->  km:0.855043, mi:1.376058, nmi:1.583540
>> DECISION TRACE (winning candidate)
  value=781.0  unit_raw=None  unit_norm=None
  assumed_unit=mi  parsed_km=1256.897664
  score=7  breakdown={'near_keyword': 3, 'finalish': 2, 'tail_bias': 2}  span=[2302,2307]
  context=...78) ≈ 0.781.\n\nNow a = 0.00837 + 0.655*0.781*0.558. 0.655*0.781 = 0.511. 0.511*0.558...
>> DECISION & SCORE
expected_km=7319.567967144351
parsed_raw: 781.0 [—]  explicit_norm=—
assumed_unit=mi  parsed_km=1256.897664  rel_error=82.83%
flags={'near_keyword': True, 'radius_context': False}  analysis_fallback_used=False
context: ...78) ≈ 0.781.\n\nNow a = 0.00837 + 0.655*0.781*0.558. 0.655*0.781 = 0.511. 0.511*0.558...
bucket=wrong  points=0
-- batch generation time: 33.91s

BATCH 11/20  rows 10..10
Generation kwargs: {"max_new_tokens": 1000, "do_sample": false}

════════════════════════════════════════════════════════════════════════════════
SAMPLE 11/20  (batch 10-10)
────────────────────────────────────────────────────────────────────────────────
>> MESSAGES SENT
[DEVELOPER] you are an agent that understands GPS and can calculate distances
[USER] 64 °30 38.80″ N,68 °34 20.86″ W to 40° 19’ 21.71″ S, 83° 32’ 1.02″ W — need the span in statute
────────────────────────────────────────────────────────────────────────────────
>> RAW PIPELINE OUTPUT
[{"role": "system", …
>> EXTRACTED ANALYSIS TEXT
(none)
>> EXTRACTED FINAL TEXT
[{"role": "system", "content": "you are an agent that understands GPS and can calculate distances"}, {"role": "user", "content": "64 °30 38.80″ N,68 °34 20.86″ W to 40° 19’ 21.71″ S, 83° 32’ 1.02″ W — need the span in statute"}, {"role": "assistant", "content": "analysisWe need to compute the great-circle distance between two coordinates: 64°30'38.80\" N, 68°34'20.86\" W (which is in the Arctic, near Greenland? Actually 64.51078 N, 68.57239 W). And 40°19'21.71\" S, 83°32'1.02\" W (which is in Argentina, near the Andes). We need the span in statute miles. So compute distance.\n\nWe need to convert coordinates to decimal degrees: lat1 = 64 + 30/60 + 38.80/3600 = 64 + 0.5 + 0.0107778 = 64.5107778 N. lon1 = -(68 + 34/60 + 20.86/3600) = -(68 + 0.5666667 + 0.0057944) = -68.5724611 W.\n\nlat2 = -(40 + 19/60 + 21.71/3600) = -(40 + 0.3166667 + 0.0060286) = -40.3226953 S. lon2 = -(83 + 32/60 + 1.02/3600) = -(83 + 0.5333333 + 0.0002833) = -83.5336167 W.\n\nNow compute great-circle distance using haversine formula. Earth's radius: 3958.8 statute miles (mean). Let's compute.\n\nCompute Δlat = lat2 - lat1 = -40.3226953 - 64.5107778 = -104.8334731 degrees. In radians: -104.8334731 * π/180 = -1.831... Let's compute precisely: 104.8334731 * π/180 = 104.8334731 * 0.01745329252 = 1.831... Let's compute: 104.8334731 * 0.01745329252 = 1.831... 104.8334731*0.01745329252 = 1.831... Let's do: 100*0.01745329252=1.745329252; 4.8334731*0.01745329252=0.084... 4.8334731*0.01745329252 = 0.084... Let's compute precisely: 4.8334731*0.01745329252 = 0.084... 4.8334731*0.017 = 0.082, plus 4.8334731*0.00045329252=0.00219, sum 0.08419. So total 1.74533+0.08419=1.82952. Wait earlier we had 1.831. Let's compute more precisely: 104.8334731 * 0.017453292519943295 =? Use high precision: 104.8334731 * 0.017453292519943295 = 1.831... Let's compute: 104.8334731 * 0.017 = 1.782, plus 104.8334731 * 0.000453292519943295 = 0.0475, sum 1.8295. Hmm difference. Let's compute with calculator: 104.8334731 * 0.017453292519943295 = 1.831... Let's approximate: 104.8334731 * 0.01745329252 = 1.831... Let's do more accurate: 104.8334731 * 0.01745329252 = 1.831... Actually 104.8334731 * 0.01745329252 = 1.831... Let's compute: 104.8334731 * 0.017 = 1.782, 104.8334731 * 0.00045329252 = 0.0475, sum 1.8295. So maybe 1.8295 rad. Let's compute with more precision: 104.8334731 * 0.017453292519943295 = 1.831... Let's do: 104.8334731 * 0.017453292519943295 = (104.8334731 * 0.0174532925) approximate. 104.8334731 * 0.0174532925 = 1.831... Let's compute using multiplication: 104.8334731 * 0.0174532925 = 104.8334731 * (0.017 + 0.0004532925) = 104.8334731*0.017 + 104.8334731*0."}]
>> NUMERIC CANDIDATES (value [unit_raw] -> km/mi/nmi)
  64.5107778  [-]  ->  km:64.510778, mi:103.820033, nmi:119.473960
  40.3226953  [-]  ->  km:40.322695, mi:64.893088, nmi:74.677632
  83.5336167  [-]  ->  km:83.533617, mi:134.434325, nmi:154.704258
  60.0  [-]  ->  km:60.000000, mi:96.560640, nmi:111.120000
  30.0  [-]  ->  km:30.000000, mi:48.280320, nmi:55.560000
  17.0  [-]  ->  km:17.000000, mi:27.358848, nmi:31.484000
  104.8334731  [-]  ->  km:104.833473, mi:168.713121, nmi:194.151592
  17.0  [-]  ->  km:17.000000, mi:27.358848, nmi:31.484000
  104.8334731  [-]  ->  km:104.833473, mi:168.713121, nmi:194.151592
  104.8334731  [-]  ->  km:104.833473, mi:168.713121, nmi:194.151592
>> DECISION TRACE (winning candidate)
  value=64.5107778  unit_raw=None  unit_norm=None
  assumed_unit=mi  parsed_km=103.8200331877632
  score=3  breakdown={'near_keyword': 3}  span=[1125,1135]
  context=...pute Δlat = lat2 - lat1 = -40.3226953 - 64.5107778 = -104.8334731 degrees. In radians: -10...
>> DECISION & SCORE
expected_km=11730.382621014336
parsed_raw: 64.5107778 [—]  explicit_norm=—
assumed_unit=mi  parsed_km=103.8200331877632  rel_error=99.11%
flags={'near_keyword': True, 'radius_context': False}  analysis_fallback_used=False
context: ...pute Δlat = lat2 - lat1 = -40.3226953 - 64.5107778 = -104.8334731 degrees. In radians: -10...
bucket=wrong  points=0
-- batch generation time: 33.95s

BATCH 12/20  rows 11..11
Generation kwargs: {"max_new_tokens": 1000, "do_sample": false}

════════════════════════════════════════════════════════════════════════════════
SAMPLE 12/20  (batch 11-11)
────────────────────────────────────────────────────────────────────────────────
>> MESSAGES SENT
[DEVELOPER] you are an agent that understands GPS and can calculate distances
[USER] DISTANCE??? 3  ° 55′ 41.15″ N, 117  ° 0′ 59.79″ W 31° 45′ 29.26″ N 153° 56′ 4.80″ W (NM)
────────────────────────────────────────────────────────────────────────────────
>> RAW PIPELINE OUTPUT
[{"role": "system", …
>> EXTRACTED ANALYSIS TEXT
(none)
>> EXTRACTED FINAL TEXT
Distance between the two points**\n\n| Point | Latitude (° ′ ″) | Longitude (° ′ ″) | Decimal degrees |\n|-------|------------------|-------------------|-----------------|\n| 1 | 3 ° 55′ 41.15″ N | 117 ° 0′ 59.79″ W | 3.92810 ° N, –117.01661 ° |\n| 2 | 31 ° 45′ "}]
>> NUMERIC CANDIDATES (value [unit_raw] -> km/mi/nmi)
  45.0  [-]  ->  km:45.000000, mi:72.420480, nmi:83.340000
  31.0  [-]  ->  km:31.000000, mi:49.889664, nmi:57.412000
  117.01661  [-]  ->  km:117.016610, mi:188.319979, nmi:216.714762
  59.79  [-]  ->  km:59.790000, mi:96.222678, nmi:110.731080
  117.0  [-]  ->  km:117.000000, mi:188.293248, nmi:216.684000
  41.15  [-]  ->  km:41.150000, mi:66.224506, nmi:76.209800
  55.0  [-]  ->  km:55.000000, mi:88.513920, nmi:101.860000
  2.0  [-]  ->  km:2.000000, mi:3.218688, nmi:3.704000
  3.9281  [-]  ->  km:3.928100, mi:6.321664, nmi:7.274841
  0.0  [-]  ->  km:0.000000, mi:0.000000, nmi:0.000000
>> DECISION TRACE (winning candidate)
  value=45.0  unit_raw=None  unit_norm=None
  assumed_unit=nmi  parsed_km=83.34
  score=-4  breakdown={'tail_bias': 2, 'dms_penalty': -6}  span=[258,260]
  context=...3.92810 ° N, –117.01661 ° |\n| 2 | 31 ° 45′ "}]...
>> DECISION & SCORE
expected_km=4939.067762908107
parsed_raw: 45.0 [—]  explicit_norm=—
assumed_unit=nmi  parsed_km=83.34  rel_error=98.31%
flags={'near_keyword': False, 'radius_context': False}  analysis_fallback_used=False
context: ...3.92810 ° N, –117.01661 ° |\n| 2 | 31 ° 45′ "}]...
bucket=wrong  points=0
-- batch generation time: 33.93s

BATCH 13/20  rows 12..12
Generation kwargs: {"max_new_tokens": 1000, "do_sample": false}

════════════════════════════════════════════════════════════════════════════════
SAMPLE 13/20  (batch 12-12)
────────────────────────────────────────────────────────────────────────────────
>> MESSAGES SENT
[DEVELOPER] you are an agent that understands GPS and can calculate distances
[USER] 34° 27.539′ , 171° 39.507′ E -> 61 30.337 N 127 12.435 W in kilometer?
────────────────────────────────────────────────────────────────────────────────
>> RAW PIPELINE OUTPUT
[{"role": "system", …
>> EXTRACTED ANALYSIS TEXT
(none)
>> EXTRACTED FINAL TEXT
Distance between the two points**\n\n| Point | Latitude | Longitude |\n|-------|----------|-----------|\n| 1 | 34° 27.539′ N → 34.4598° N | 171° 39.507′ E → 171.6585° E |\n| 2 | 61° 30.337′ N → 61.5056° N | 127° 12.435′ W → –127.2073° W |\n\nUsing the haversine formula (Earth radius ≈ 6 371 km):\n\n1. Convert to radians  \n   * φ₁ = 0.6015 rad, λ₁ = 2.9955 rad  \n   * φ₂ = 1.0735 rad, λ₂ = –2.2195 rad  \n\n2. Δφ = φ₂ – φ₁ = 0.4720 rad  \n   Δλ = λ₂ – λ₁ = –5.2150 rad  \n\n3. a = sin²("}]
>> NUMERIC CANDIDATES (value [unit_raw] -> km/mi/nmi)
  6371.0  [km]  ->  km:6371.000000, mi:10253.130624, nmi:11799.092000
  2.9955  [-]  ->  km:2.995500, mi:4.820790, nmi:5.547666
  0.6015  [-]  ->  km:0.601500, mi:0.968020, nmi:1.113978
  127.2073  [-]  ->  km:127.207300, mi:204.720305, nmi:235.587920
  12435.0  [-]  ->  km:12435.000000, mi:20012.192640, nmi:23029.620000
  127.0  [-]  ->  km:127.000000, mi:204.386688, nmi:235.204000
  5.215  [-]  ->  km:5.215000, mi:8.392729, nmi:9.658180
  0.472  [-]  ->  km:0.472000, mi:0.759610, nmi:0.874144
  2.0  [-]  ->  km:2.000000, mi:3.218688, nmi:3.704000
  2.2195  [-]  ->  km:2.219500, mi:3.571939, nmi:4.110514
>> DECISION TRACE (winning candidate)
  value=6371.0  unit_raw='km'  unit_norm='km'
  assumed_unit=km  parsed_km=6371.0
  score=2  breakdown={'unit_bonus': 5, 'near_keyword': 3, 'finalish': 2, 'tail_bias': 2, 'math_penalty': -4, 'radius_penalty': -6}  span=[286,294]
  context=...g the haversine formula (Earth radius ≈ 6 371 km):\n\n1. Convert to radians  \n   * φ₁ =...
>> DECISION & SCORE
expected_km=11998.08550903239
parsed_raw: 6371.0 [km]  explicit_norm=km
assumed_unit=km  parsed_km=6371.0  rel_error=46.90%
flags={'near_keyword': True, 'radius_context': True}  analysis_fallback_used=False
context: ...g the haversine formula (Earth radius ≈ 6 371 km):\n\n1. Convert to radians  \n   * φ₁ =...
bucket=wrong  points=0
-- batch generation time: 33.87s

BATCH 14/20  rows 13..13
Generation kwargs: {"max_new_tokens": 1000, "do_sample": false}

════════════════════════════════════════════════════════════════════════════════
SAMPLE 14/20  (batch 13-13)
────────────────────────────────────────────────────────────────────────────────
>> MESSAGES SENT
[DEVELOPER] you are an agent that understands GPS and can calculate distances
[USER] distance in statute: 76° 13' 2.06″ S  ,  2° 41' 45.22″ E to 84° 33 12.19” , 26° 27 38.18” E
────────────────────────────────────────────────────────────────────────────────
>> RAW PIPELINE OUTPUT
[{"role": "system", …
>> EXTRACTED ANALYSIS TEXT
(none)
>> EXTRACTED FINAL TEXT
[{"role": "system", "content": "you are an agent that understands GPS and can calculate distances"}, {"role": "user", "content": "distance in statute: 76° 13' 2.06″ S  ,  2° 41' 45.22″ E to 84° 33 12.19” , 26° 27 38.18” E"}, {"role": "assistant", "content": "analysisWe need to compute distance between two coordinates: first point: 76° 13' 2.06″ S, 2° 41' 45.22″ E. Second point: 84° 33 12.19” (likely S?), 26° 27 38.18” E. The second latitude likely 84° 33' 12.19\" S. So both are southern hemisphere. Compute great-circle distance. Use haversine formula. Need to output distance in statute miles? \"distance in statute\" likely statute miles. So compute.\n\nLet's convert to decimal degrees:\n\nPoint A: lat = - (76 + 13/60 + 2.06/3600). 13/60 = 0.2166667. 2.06/3600 = 0.0005722. Sum = 76.2172389. So latA = -76.2172389°. lonA = 2 + 41/60 + 45.22/3600. 41/60 = 0.6833333. 45.22/3600 = 0.0125722. Sum = 2.6959055°. So lonA = 2.6959055°.\n\nPoint B: latB = - (84 + 33/60 + 12.19/3600). 33/60 = 0.55. 12.19/3600 = 0.0033944. Sum = 84.5533944. So latB = -84.5533944°. lonB = 26 + 27/60 + 38.18/3600. 27/60 = 0.45. 38.18/3600 = 0.0106056. Sum = 26.4606056°. So lonB = 26.4606056°.\n\nNow compute haversine. Convert to radians: multiply by pi/180.\n\nlatA_rad = -76.2172389 * pi/180. Let's compute approximate: 76.2172389/180 = 0.4237593. times pi = 1.331... Actually compute: 0.4237593 * 3.14159265 = 1.331... Let's compute precisely: 0.4237593*3.14159265 = 1.331... 0.4237593*3 = 1.2712779; plus 0.4237593*0.14159265 = 0.059... sum ~1.3309. So latA_rad ≈ -1.3309 rad.\n\nlatB_rad: 84.5533944/180 = 0.469852. times pi = 1.476... 0.469852*3.14159265 = 1.476... Let's compute: 0.469852*3 = 1.409556; plus 0.469852*0.14159265 = 0.0665; sum = 1.47606. So latB_rad ≈ -1.47606 rad.\n\nlonA_rad: 2.6959055/180 = 0.014982. times pi = 0.0471 rad. 0.014982*3.14159265 = 0.0471.\n\nlonB_rad: 26.4606056/180 = 0.1470. times pi = 0.4620 rad. 0.1470*3.14159265 = 0.4620.\n\nNow haversine: Δlat = latB - latA = (-1.47606) - (-1.3309) = -0.14516 rad. Δlon = lonB - lonA = 0.4620 - 0.0471 = 0.4149 rad.\n\nCompute a = sin²(Δlat/2) + cos(latA)*cos(latB)*sin²(Δlon/2).\n\nΔlat/2 = -0.07258 rad. sin(Δlat/2) ≈ -0.07253 (since small). sin² = 0.00526.\n\nΔlon/2 = 0.20745 rad. sin(Δlon/2) ≈ 0.2063. sin² = 0.0426.\n\ncos(latA) = cos(-1.3309) = cos(1.3309). cos(1.3309) ≈ 0.241? Let's compute: cos(1.33 rad) ~ 0.241. Actually cos(1.33) = 0.241. cos(latB) = cos(1.47606) ≈ 0.093?"}]
>> NUMERIC CANDIDATES (value [unit_raw] -> km/mi/nmi)
  241.0  [-]  ->  km:241.000000, mi:387.851904, nmi:446.332000
  59.0  [-]  ->  km:59.000000, mi:94.951296, nmi:109.268000
  1.3309  [-]  ->  km:1.330900, mi:2.141876, nmi:2.464827
  1.3309  [-]  ->  km:1.330900, mi:2.141876, nmi:2.464827
  1.3309  [-]  ->  km:1.330900, mi:2.141876, nmi:2.464827
  0.0426  [-]  ->  km:0.042600, mi:0.068558, nmi:0.078895
  0.00526  [-]  ->  km:0.005260, mi:0.008465, nmi:0.009742
  0.0665  [-]  ->  km:0.066500, mi:0.107021, nmi:0.123158
  0.14159265  [-]  ->  km:0.141593, mi:0.227871, nmi:0.262230
  0.4237593  [-]  ->  km:0.423759, mi:0.681974, nmi:0.784802
>> DECISION TRACE (winning candidate)
  value=241.0  unit_raw=None  unit_norm=None
  assumed_unit=mi  parsed_km=387.85190400000005
  score=7  breakdown={'near_keyword': 3, 'finalish': 2, 'tail_bias': 2}  span=[2413,2418]
  context=...1.33 rad) ~ 0.241. Actually cos(1.33) = 0.241. cos(latB) = cos(1.47606) ≈ 0.093?"}]...
>> DECISION & SCORE
expected_km=1007.7067692899489
parsed_raw: 241.0 [—]  explicit_norm=—
assumed_unit=mi  parsed_km=387.85190400000005  rel_error=61.51%
flags={'near_keyword': True, 'radius_context': False}  analysis_fallback_used=False
context: ...1.33 rad) ~ 0.241. Actually cos(1.33) = 0.241. cos(latB) = cos(1.47606) ≈ 0.093?"}]...
bucket=wrong  points=0
-- batch generation time: 33.80s
